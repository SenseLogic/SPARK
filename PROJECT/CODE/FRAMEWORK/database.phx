// -- FUNCTIONS

function GetDatabaseConnection(
    )
{
    static local
        connection = null;

    if ( is_null( connection ) )
    {
        connection
            = new PDO(
                  'mysql:host=' .. DatabaseHost .. ';dbname=' .. DatabaseName,
                  DatabaseUserName,
                  DatabasePassword
                  );

        connection.prepare( "set names 'utf8mb4'" ).execute();
    }

    return connection;
}

// ~~

function GetDatabaseError(
    )
{
    return GetDatabaseConnection().errorInfo();
}

// ~~

function GetDatabaseAddedId(
    )
{
    return GetDatabaseConnection().lastInsertId();
}

// ~~

function GetDatabaseStatement(
    string command
    )
{
    return GetDatabaseConnection().prepare( command );
}

// ~~

function RunDatabaseCommand(
    string command
    )
{
    var statement = GetDatabaseStatement( command );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    return statement;
}

// ~~

function GetDatabaseObject(
    statement
    )
{
    return statement.fetchObject();
}

// ~~

function GetDatabaseObjectArray(
    statement
    )
{
    var object_array = [];

    while ( var object = statement.fetchObject() )
    {
        array_push( object_array, object );
    }

    return object_array;
}

// ~~

function GetDatabaseTableObjectArray(
    string table_name
    )
{
    var statement = GetDatabaseStatement( 'select * from `' .. table_name .. '`' );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    return GetDatabaseObjectArray( statement );
}

// ~~

function GetDatabaseTableNameArray()
{
    var statement = GetDatabaseStatement( 'show tables' );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    var table_name_array = [];

    while ( var column_array = statement.fetch( PDO::FETCH_NUM ) )
    {
        array_push( table_name_array, column_array[ 0 ] );
    }

    sort( table_name_array );

    return table_name_array;
}

// ~~

function GetDatabaseColumnSqlText(
    column_value
    )
{
    return
        '"'
        .. str_replace( [ "\\", "\n", "\r", "\t", "\"", "\'" ], [ "\\\\", "\\n", "\\r", "\\t", "\\\"", "\\'" ], column_value )
        .. '"';
}

// ~~

function GetDatabaseTableSqlText(
    string table_name
    )
{
    var statement = GetDatabaseStatement( 'select * from `' .. table_name .. '`' );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    var command_array = [];

    while ( var column_array = statement.fetch( PDO::FETCH_ASSOC ) )
    {
        var column_name_array = array_keys( column_array );
        var column_value_array = array_values( column_array );
        var column_value_count = count( column_value_array );

        var command
            = 'replace into `' .. DatabaseName .. '`.`' .. table_name .. "`\n"
              .. "    ( `\n"
              .. "        `" .. implode( '`, `', column_name_array ) .. "`\n"
              .. "    )\n"
              .. "    values\n"
              .. "    (\n";

        for ( var column_value_index = 0;
              column_value_index < column_value_count;
              ++column_value_index )
        {
            command
                ..= '        ' .. GetDatabaseColumnSqlText( column_value_array[ column_value_index ] );

            if ( column_value_index + 1 < column_value_count )
            {
                command ..= ",\n";
            }
            else
            {
                command ..= "\n";
            }
        }

        command ..= "    );\n";

        array_push( command_array, command );
    }

    sort( command_array );

    return implode( "\n", command_array );
}

// ~~

function GetDatabaseSqlText(
    array table_name_array
    )
{
    var database_sql_text = '';

    foreach ( var table_name; table_name_array )
    {
        database_sql_text
            ..= GetDatabaseTableSqlText( table_name ) .. "\n";
    }

    return database_sql_text;
}

// ~~

function SplitDatabaseSqlText(
    string sql_text
    )
{
    return explode( ";\n", preg_replace( "/;\s*\n/", ";\n", str_replace( "\r", "", sql_text ) ) .. "\n" );
}
