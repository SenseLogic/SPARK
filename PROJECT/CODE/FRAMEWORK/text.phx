// -- VARIABLES

var TextMap = [];
var ProcessedTagArray = [];
var ProcessedTagDefinitionArray = [];
var ProcessedDualTagArray = [];
var ProcessedDualTagDefinitionArray = [];
var ProcessedNewlineOpeningTag = '';
var ProcessedNewlineClosingTag = '';
var ProcessedLineTagArray = [];
var ProcessedLineTagDefinitionArray = [];
var EndTagIsDefined = false;

// -- FUNCTIONS

function GetCharacterCount(
    string text
    )
{
    return strlen( text );
}

// ~~

function SplitText(
    string text,
    string separator
    )
{
    return explode( separator, text );
}

// ~~

function GetTextPosition(
    string text,
    string searched_text,
    int first_text_position = 0
    )
{
    return strpos( text, searched_text, first_text_position );
}

// ~~

function ContainsText(
    string text,
    string searched_text
    )
{
    return str_contains( text, searched_text );
}

// ~~

function ReplaceText(
    string text,
    old_text,
    new_text
    )
{
    return str_replace( old_text, new_text, text );
}

// ~~

function ReplaceTexts(
    string text,
    old_text,
    new_text
    )
{
    do
    {
        var prior_text = text;
        text = str_replace( old_text, new_text, text );
    }
    while ( text !== prior_text );

    return text;
}

// ~~

function ReplaceSpecialCharacters(
    string text
    )
{
    return str_replace( [ '\n', '\r', '\t' ], [ "\n", "\r", "\t" ], text );
}

// ~~

function ReplaceDualText(
    string text,
    string old_text,
    string first_new_text,
    string second_new_text
    )
{
    var part_array = explode( old_text, text );
    var part_count = count( part_array );

    for ( var part_index = 0;
          part_index + 1 < part_count;
          part_index += 2 )
    {
        part_array[ part_index ] ..= first_new_text;
        part_array[ part_index + 1 ] ..= second_new_text;
    }

    return implode( '', part_array );
}

// ~~

function GetBase64Text(
    string text
    )
{
    return base64_encode( text );
}

// ~~

function GetUntaggedText(
    string text
    )
{
    return
        str_replace(
            [ '<', '>' ],
            [ '&lt;', '&gt;' ],
            text
            );
}

// ~~

function GetEncodedHtml(
    string text
    )
{
    return htmlentities( text );
}

// ~~

function GetDecodedHtml(
    string text
    )
{
    return html_entity_decode( text );
}

// ~~

function GetEncodedUri(
    string text
    )
{
    return urlencode( text );
}

// ~~

function GetDecodedUri(
    string text
    )
{
    return urldecode( text );
}

// ~~

function IsInteger(
    value
    )
{
    return
        is_numeric( value )
        && value == ( int ) value;
}

// ~~

function IsNatural(
    value
    )
{
    return
        is_numeric( value )
        && value == ( int ) value
        && value > 0;
}

// ~~

function IsUuid(
    value
    )
{
    return
        is_string( value )
        && strlen( value ) === 36
        && preg_match( '/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/', value ) === 1;
}

// ~~

function GetInteger(
    value
    )
{
    return intval( value );
}

// ~~

function GetReal(
    value
    )
{
    return floatval( value );
}

// ~~

function GetValueText(
    value
    )
{
    if ( is_array( value )
         || is_object( value ) )
    {
        return json_encode( value );
    }
    else
    {
        return strval( value );
    }
}

// ~~

function GetHexadecimalText(
    int integer
    )
{
    return base_convert( integer, 10, 16 );
}

// ~~

function GetHexatridecimalText(
    int integer
    )
{
    return base_convert( integer, 10, 36 );
}

// ~~

function GetQuotedText(
    string text
    )
{
    return addslashes( text );
}

// ~~

function HasPrefix(
    string text,
    string prefix
    )
{
    var text_character_count = strlen( text );
    var prefix_character_count = strlen( prefix );

    return
        text_character_count >= prefix_character_count
        && strncmp( text, prefix, prefix_character_count ) === 0;
}

// ~~

function RemovePrefix(
    string text,
    string prefix
    )
{
    var text_character_count = strlen( text );
    var prefix_character_count = strlen( prefix );

    if ( text_character_count >= prefix_character_count
         && strncmp( text, prefix, prefix_character_count ) === 0 )
    {
        return substr( text, prefix_character_count );
    }
    else
    {
        return text;
    }
}

// ~~

function HasSuffix(
    string text,
    string suffix
    )
{
    var text_character_count = strlen( text );
    var suffix_character_count = strlen( suffix );

    return
        text_character_count >= suffix_character_count
        && substr_compare( text, suffix, text_character_count - suffix_character_count, suffix_character_count ) === 0;
}

// ~~

function RemoveSuffix(
    string text,
    string suffix
    )
{
    var text_character_count = strlen( text );
    var suffix_character_count = strlen( suffix );

    if ( text_character_count >= suffix_character_count
         && substr_compare( text, suffix, text_character_count - suffix_character_count, suffix_character_count ) === 0 )
    {
        return substr( text, 0, text_character_count - suffix_character_count );
    }
    else
    {
        return text;
    }
}

// ~~

function GetLowerCaseText(
    string text
    )
{
    return strtolower( text );
}

// ~~

function GetUpperCaseText(
    string text
    )
{
    return strtoupper( text );
}

// ~~

function GetCapitalCaseText(
    string text
    )
{
    if ( count( text ) <= 1 )
    {
        return strtoupper( text );
    }
    else
    {
        return strtoupper( text[ 0 ] ) .. strtolower( substr( text, 1 ) );
    }
}

// ~~

function GetAlphanumericText(
    string text,
    string kept_characters = '',
    string replaced_characters = '',
    string replacement_character = ''
    )
{
    var alphanumeric_text = '';

    foreach ( var character; str_split( text ) )
    {
        if ( ( character >= '0' && character <= '9' )
             || ( character >= 'a' && character <= 'z' )
             || ( character >= 'A' && character <= 'Z' )
             || strpos( kept_characters, character ) !== false )
        {
            alphanumeric_text ..= character;
        }
        else if ( replacement_character !== ''
                  && ( replaced_characters === ''
                       || strpos( replaced_characters, character ) !== false ) )
        {
            alphanumeric_text ..= replacement_character;
        }
    }

    return alphanumeric_text;
}

// ~~

function GetUnaccentuatedText(
    string text
    )
{
    return
        str_replace(
            [
                'á', 'à', 'â', 'ã', 'ª', 'ä', 'å', 'Á', 'À', 'Â', 'Ã', 'Ä',
                'é', 'è', 'ê', 'ë', 'É', 'È', 'Ê', 'Ë',
                'í', 'ì', 'î', 'ï', 'Í', 'Ì', 'Î', 'Ï',
                'œ', 'ò', 'ó', 'ô', 'õ', 'ø', 'Ø', 'Ó', 'Ò', 'Ô', 'Õ',
                'ú', 'ù', 'û', 'Ú', 'Ù', 'Û',
                'ç', 'Ç', 'Ñ', 'ñ'
            ],
            [
                'a', 'a', 'a', 'a', 'a', 'a', 'a', 'A', 'A', 'A', 'A', 'A',
                'e', 'e', 'e', 'e', 'E', 'E', 'E', 'E',
                'i', 'i', 'i', 'i', 'I', 'I', 'I', 'I',
                'oe', 'o', 'o', 'o', 'o', 'o', 'O', 'O', 'O', 'O', 'O',
                'u', 'u', 'u', 'U', 'U', 'U',
                'c', 'C', 'N', 'n'
            ],
            text
            );
}

// ~~

function GetSlugText(
    string text
    )
{
    return ReplaceTexts( GetAlphanumericText( GetLowerCaseText( GetUnaccentuatedText( text ) ), '', '', '-' ), '--', '-' );
}

// ~~

function GetTitleCaseText(
    string text,
    bool prior_character_is_letter = false,
    bool separator_characters_are_kept = true
    )
{
    var title_case_text = '';

    foreach ( var character; str_split( text ) )
    {
        var lower_case_character = strtolower( character );
        var upper_case_character = strtoupper( character );

        if ( lower_case_character !== upper_case_character )
        {
            if ( prior_character_is_letter )
            {
                title_case_text ..= lower_case_character;
            }
            else
            {
                title_case_text ..= upper_case_character;
            }

            prior_character_is_letter = true;
        }
        else
        {
            if ( ( character >= '0'
                   && character <= '9' )
                 || separator_characters_are_kept )
            {
                title_case_text ..= character;
            }

            prior_character_is_letter = false;
        }
    }

    return title_case_text;
}

// ~~

function GetPascalCaseText(
    string text,
    bool prior_character_is_letter = false
    )
{
    return GetTitleCaseText( text, false, false );
}

// ~~

function GetCamelCaseText(
    string text
    )
{
    return GetTitleCaseText( text, true, false );
}

// ~~

function GetSnakeCaseText(
    string text,
    string separator_character = '_'
    )
{
    var character_array = [];
    var character_is_lower_case_array = [];
    var character_is_upper_case_array = [];
    var character_is_digit_array = [];

    foreach ( var character; str_split( str_replace( '-', '_', text ) ) )
    {
        array_push( character_array, character );

        var lower_case_character = strtolower( character );
        var upper_case_character = strtoupper( character );

        if ( lower_case_character !== upper_case_character )
        {
            array_push( character_is_lower_case_array, character === lower_case_character );
            array_push( character_is_upper_case_array, character === upper_case_character );
        }
        else
        {
            array_push( character_is_lower_case_array, false );
            array_push( character_is_upper_case_array, false );
        }

        array_push( character_is_digit_array, character >= '0' && character <= '9' );
    }

    var character_count = count( character_array );
    var snake_case_text = '';
    var prior_character_is_lower_case = false;
    var prior_character_is_upper_case = false;
    var prior_character_is_digit = false;

    for ( var character_index = 0;
          character_index < character_count;
          ++character_index )
    {
        var character = character_array[ character_index ];
        var character_is_lower_case = character_is_lower_case_array[ character_index ];
        var character_is_upper_case = character_is_upper_case_array[ character_index ];
        var character_is_digit = character_is_digit_array[ character_index ];

        if ( character_index + 1 < character_count )
        {
            var next_character_is_lower_case = character_is_lower_case_array[ character_index + 1 ];
        }
        else
        {
            var next_character_is_lower_case = false;
        }

        if ( ( prior_character_is_lower_case
               && ( character_is_upper_case
                    || character_is_digit ) )
             || ( prior_character_is_digit
                  && ( character_is_lower_case
                       || character_is_upper_case ) )
             || ( prior_character_is_upper_case
                  && character_is_upper_case
                  && next_character_is_lower_case ) )
        {
            snake_case_text ..= separator_character;
        }

        snake_case_text ..= character;

        prior_character_is_lower_case = character_is_lower_case;
        prior_character_is_upper_case = character_is_upper_case;
        prior_character_is_digit = character_is_digit;
    }

    return strtolower( snake_case_text );
}

// ~~

function GetKebabCaseText(
    string text
    )
{
    return GetSnakeCaseText( text, '-' );
}

// ~~

function GetPartialText(
    string text,
    int maximum_character_count,
    string ellipsis = '...',
    string trimmed_characters = ' '
    )
{
    var text_character_count = strlen( text );

    if ( text_character_count <= maximum_character_count )
    {
        return text;
    }
    else
    {
        return
            rtrim( substr( text, 0, maximum_character_count - strlen( ellipsis ) ), trimmed_characters )
            .. ellipsis;
    }
}

// ~~

function GetShortenedText(
    string text,
    int maximum_character_count,
    string ellipsis = '...',
    string trimmed_characters = ' '
    )
{
    var text_character_count = strlen( text );

    if ( text_character_count <= maximum_character_count )
    {
        return text;
    }
    else
    {
        var ellipsis_character_count = strlen( ellipsis );
        var first_character_count = ( int )( ( maximum_character_count - ellipsis_character_count ) / 2 );
        var last_character_count = maximum_character_count - first_character_count - ellipsis_character_count;

        return
            rtrim( substr( text, 0, first_character_count ), trimmed_characters )
            .. ellipsis
            .. ltrim( substr( text, text_character_count - last_character_count, last_character_count ), trimmed_characters );
    }
}

// ~~

function GetIncrementedText(
    string prefix = '',
    string suffix = ''
    )
{
    static local
        counter = 0;

    ++counter;

    return prefix .. counter .. suffix;
}

// ~~

function GetBareText(
    string text
    )
{
    return preg_replace( '/<.*?>?>/', '', text );
}

// ~~

function DefineText(
    string slug,
    string text
    )
{
    global
        TextMap;

    TextMap[ slug ] = text;
}

// ~~

function GetText_(
    string slug
    )
{
    global
        TextMap;

    if ( array_key_exists( slug, TextMap ) )
    {
        return TextMap[ slug ];
    }
    else
    {
        return slug;
    }
}

// ~~

function DefineTag(
    string tag,
    string tag_definition
    )
{
    global
        ProcessedTagArray,
        ProcessedTagDefinitionArray;

    array_push( ProcessedTagArray, tag );
    array_push( ProcessedTagDefinitionArray, tag_definition );
}

// ~~

function DefineColorTag(
    string tag_name,
    string color_value = ''
    )
{
    if ( color_value === '' )
    {
        DefineTag( '<' .. tag_name .. '>', '<span class="color-' .. tag_name .. '">' );
    }
    else
    {
        DefineTag( '<' .. tag_name .. '>', '<span style="color:' .. color_value .. '">' );
    }

    DefineTag( '</' .. tag_name .. '>', '</span>' );
}

// ~~

function DefineEndTag(
    )
{
    global
        EndTagIsDefined;

    if ( !EndTagIsDefined )
    {
        DefineTag( '>>', '">' );
        EndTagIsDefined = true;
    }
}

// ~~

function DefineOpenTag(
    string tag_name
    )
{
    DefineTag( '<' .. tag_name .. '<', '<' .. tag_name .. ' class="' );
    DefineEndTag();
}

// ~~

function DefineAttributeTag(
    string tag_name,
    string attribute_name = ''
    )
{
    if ( attribute_name === '' )
    {
        DefineTag( '[' .. tag_name .. ']', '" ' .. tag_name .. '="' );
    }
    else
    {
        DefineTag( '[' .. tag_name .. ']', '" ' .. attribute_name .. '="' );
    }
}

// ~~

function DefineStyleTag(
    string tag_name,
    string style_name = ''
    )
{
    if ( style_name === '' )
    {
        DefineTag( '<' .. tag_name .. '>', '<span style="' .. tag_name .. ':' );
    }
    else
    {
        DefineTag( '<' .. tag_name .. '>', '<span style="' .. style_name .. ':' );
    }

    DefineEndTag();
    DefineTag( '</' .. tag_name .. '>', '</span>' );
}

// ~~

function DefineDualTag(
    string dual_tag,
    string dual_tag_opening_definition,
    string dual_tag_closing_definition
    )
{
    global
        ProcessedDualTagArray,
        ProcessedDualTagDefinitionArray;

    array_push( ProcessedDualTagArray, dual_tag );
    array_push( ProcessedDualTagDefinitionArray, dual_tag_opening_definition );
    array_push( ProcessedDualTagDefinitionArray, dual_tag_closing_definition );
}

// ~~

function GetProcessedText(
    string text
    )
{
    global
        ProcessedDualTagArray,
        ProcessedDualTagDefinitionArray,
        ProcessedTagArray,
        ProcessedTagDefinitionArray;

    var processed_dual_tag_count = count( ProcessedDualTagArray );

    if ( processed_dual_tag_count > 0 )
    {
        for ( var processed_dual_tag_index = 0;
              processed_dual_tag_index < processed_dual_tag_count;
              ++processed_dual_tag_index )
        {
            text
                = ReplaceDualText(
                      text,
                      ProcessedDualTagArray[ processed_dual_tag_index ],
                      ProcessedDualTagDefinitionArray[ processed_dual_tag_index * 2 ],
                      ProcessedDualTagDefinitionArray[ processed_dual_tag_index * 2 + 1 ]
                      );
        }
    }

    return str_replace( ProcessedTagArray, ProcessedTagDefinitionArray, text );
}

// ~~

function DefineNewlineTag(
    string newline_opening_tag,
    string newline_ending_tag
    )
{
    global
        ProcessedNewlineClosingTag,
        ProcessedNewlineOpeningTag;

    ProcessedNewlineOpeningTag = newline_opening_tag;
    ProcessedNewlineClosingTag = newline_ending_tag;
}

// ~~

function DefineLineTag(
    string line_tag,
    string line_tag_definition
    )
{
    global
        ProcessedLineTagArray,
        ProcessedLineTagDefinitionArray;

    array_push( ProcessedLineTagArray, line_tag );
    array_push( ProcessedLineTagDefinitionArray, line_tag_definition );
}

// ~~

function GetProcessedMultilineText(
    string text
    )
{
    global
        ProcessedLineTagArray,
        ProcessedLineTagDefinitionArray,
        ProcessedNewlineClosingTag,
        ProcessedNewlineOpeningTag;

    if ( ProcessedNewlineOpeningTag !== '' )
    {
        text
            = str_replace(
                ProcessedLineTagArray,
                ProcessedLineTagDefinitionArray,
                ProcessedNewlineOpeningTag
                .. str_replace( "\n", ProcessedNewlineClosingTag .. ProcessedNewlineOpeningTag, text )
                .. ProcessedNewlineClosingTag
                );
    }

    return GetProcessedText( text );
}
