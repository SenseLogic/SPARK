// -- FUNCTIONS

function GetRequest(
    )
{
    return _SERVER[ 'REQUEST_URI' ];
}

// ~~

function GetPath(
    )
{
    static local
        path = null;

    if ( is_null( path ) )
    {
        path = explode( '?', _SERVER[ 'REQUEST_URI' ] )[ 0 ];

        if ( path === '' )
        {
            path = '/';
        }
    }

    return path;
}

// ~~

function GetPathValueArray(
    string path
    )
{
    if ( substr( path, 0, 1 ) === '/' )
    {
        path = substr( path, 1 );
    }

    if ( substr( path, -1 ) === '/' )
    {
        path = substr( path, 0, -1 );
    }

    if ( path === '' )
    {
        return [];
    }
    else
    {
        return explode( '/', path );
    }
}

// ~~

function GetRoute(
    array &path_value_array,
    string default_value = ''
    )
{
    if ( count( path_value_array ) === 0 )
    {
        return default_value;
    }
    else
    {
        return implode( '/', path_value_array );
    }
}

// ~~

function AddParentRoute(
    route = null
    )
{
    if ( route === null )
    {
        route = GetPath();
    }

    var route_array = FindSessionValue( "RouteArray", [] );

    for ( var route_index = count( route_array ) - 1;
          route_index >= 0;
          --route_index )
    {
        if ( route_array[ route_index ] === route )
        {
            array_splice( route_array, route_index );

            break;
        }
    }

    array_push( route_array, route );

    SetSessionValue( "RouteArray", route_array );
}

// ~~

function GetParentRoute(
    route = null,
    string default_parent_route = ''
    )
{
    if ( route === null )
    {
        route = GetPath();
    }

    var route_array = FindSessionValue( "RouteArray", [] );

    for ( var route_index = 0;
          route_index < count( route_array );
          ++route_index )
    {
        if ( route_array[ route_index ] === route
             && route_index > 0 )
        {
            return route_array[ route_index - 1 ];
        }
    }

    return default_parent_route;
}

// ~~

function IsGetRequest(
    )
{
    return _SERVER[ 'REQUEST_METHOD' ] === 'GET';
}

// ~~

function IsPostRequest(
    )
{
    return _SERVER[ 'REQUEST_METHOD' ] === 'POST';
}

// ~~

function IsPutRequest(
    )
{
    return _SERVER[ 'REQUEST_METHOD' ] === 'PUT';
}

// ~~

function IsDeleteRequest(
    )
{
    return _SERVER[ 'REQUEST_METHOD' ] === 'DELETE';
}

// ~~

function GetQuery(
    )
{
    return _SERVER[ 'QUERY_STRING' ];
}

// ~~

function HasQueryValue(
    string name
    )
{
    return isset( _GET[ name ] );
}

// ~~

function GetQueryValue(
    string name
    )
{
    return _GET[ name ];
}

// ~~

function FindQueryValue(
    string name,
    string default_value
    )
{
    if ( isset( _GET[ name ] ) )
    {
        return _GET[ name ];
    }
    else
    {
        return default_value;
    }
}

// ~~

function HasPostValue(
    string name
    )
{
    return isset( _POST[ name ] );
}

// ~~

function GetPostValue(
    string name
    )
{
    return _POST[ name ];
}

// ~~

function FindPostValue(
    string name,
    string default_value
    )
{
    if ( isset( _POST[ name ] ) )
    {
        return _POST[ name ];
    }
    else
    {
        return default_value;
    }
}

// ~~

function HasCookieValue(
    string name
    )
{
    return isset( _COOKIE[ name ] );
}

// ~~

function GetCookieValue(
    string name
    )
{
    return _COOKIE[ name ];
}

// ~~

function FindCookieValue(
    string name,
    string default_value
    )
{
    if ( isset( _COOKIE[ name ] ) )
    {
        return _COOKIE[ name ];
    }
    else
    {
        return default_value;
    }
}

// ~~

function GetServerName(
    )
{
    return _SERVER[ 'SERVER_NAME' ];
}

// ~~

function GetServerAddress(
    )
{
    return _SERVER[ 'SERVER_ADDR' ];
}

// ~~

function GetBrowserName(
    )
{
    if ( isset( _SERVER[ 'HTTP_USER_AGENT' ] ) )
    {
        var user_agent = _SERVER[ 'HTTP_USER_AGENT' ];
        var part_array = explode( '/', str_replace( ' ', '/', user_agent ) );

        if ( in_array( 'Edge', part_array ) )
        {
            return 'Edge';
        }
        else if ( in_array( 'MSIE', part_array )
                  && !in_array( 'Opera', part_array ) )
        {
            return 'Internet Explorer';
        }
        else if ( in_array( 'Firefox', part_array ) )
        {
            return 'Firefox';
        }
        else if ( in_array( 'Chrome', part_array ) )
        {
            return 'Chrome';
        }
        else if ( in_array( 'Safari', part_array ) )
        {
            return 'Safari';
        }
        else if ( in_array( 'Opera', part_array ) )
        {
            return 'Opera';
        }
        else if ( in_array( 'Netscape', part_array ) )
        {
            return 'Netscape';
        }
        else if ( strpos( user_agent, 'like Gecko' ) !== false )
        {
            return 'Internet Explorer';
        }
    }

    return 'Unknown';
}

// ~~

function GetBrowserAddress(
    )
{
    if ( isset( _SERVER[ 'HTTP_CLIENT_IP' ] ) )
    {
        return _SERVER[ 'HTTP_CLIENT_IP' ];
    }
    else if ( isset( _SERVER[ 'HTTP_X_FORWARDED_FOR' ] ) )
    {
        return _SERVER[ 'HTTP_X_FORWARDED_FOR' ];
    }
    else if ( isset( _SERVER[ 'HTTP_X_FORWARDED' ] ) )
    {
        return _SERVER[ 'HTTP_X_FORWARDED' ];
    }
    else if ( isset( _SERVER[ 'HTTP_FORWARDED_FOR' ] ) )
    {
        return _SERVER[ 'HTTP_FORWARDED_FOR' ];
    }
    else if ( isset( _SERVER[ 'HTTP_FORWARDED' ] ) )
    {
        return _SERVER[ 'HTTP_FORWARDED' ];
    }
    else if ( isset( _SERVER[ 'REMOTE_ADDR' ] ) )
    {
        return _SERVER[ 'REMOTE_ADDR' ];
    }

    return '0.0.0.0';
}

// ~~

function GetBrowserLocation(
    string browser_address
    )
{
    var location = new stdClass();
    location.Latitude = 0.0;
    location.Longitude = 0.0;
    location.CountryCode = '';
    location.TimeZone = '';
    location.IsFound = false;

    if ( isset( _SERVER[ 'GEOIP_LATITUDE' ] )
         && isset( _SERVER[ 'GEOIP_LONGITUDE' ] )
         && isset( _SERVER[ 'GEOIP_COUNTRY_CODE' ] ) )
    {
        location.Latitude = ( float )_SERVER[ 'GEOIP_LATITUDE' ];
        location.Longitude = ( float )_SERVER[ 'GEOIP_LONGITUDE' ];
        location.CountryCode = _SERVER[ 'GEOIP_COUNTRY_CODE' ];
        location.TimeZone = GetTimeZoneFromLocation( location.Latitude, location.Longitude, location.CountryCode );
        location.IsFound = true;
    }

    if ( !location.IsFound )
    {
        try
        {
            var geographic_data = json_decode( file_get_contents( 'http://ip-api.com/json/' .. browser_address ) );

            if ( geographic_data !== null
                 && property_exists( geographic_data, 'status' )
                 && geographic_data.status === 'success' )
            {
                location.Latitude = ( float )geographic_data.lat;
                location.Longitude = ( float )geographic_data.lon;
                location.CountryCode = geographic_data.countryCode;
                location.TimeZone = geographic_data.timezone;
                location.IsFound = true;
            }
        }
        catch ( Exception var exception )
        {
        }
    }

    if ( !location.IsFound )
    {
        try
        {
            var geographic_data = json_decode( file_get_contents( 'http://www.geoplugin.net/json.gp?ip=' .. browser_address ) );

            if ( geographic_data !== null
                 && property_exists( geographic_data, 'geoplugin_status' )
                 && geographic_data.geoplugin_status !== 404 )
            {
                location.Latitude = ( float )geographic_data.geoplugin_latitude;
                location.Longitude = ( float )geographic_data.geoplugin_longitude;
                location.CountryCode = geographic_data.geoplugin_countryCode;
                location.TimeZone = geographic_data.geoplugin_timezone;
                location.IsFound = true;
            }
        }
        catch ( Exception var exception )
        {
        }
    }

    return location;
}

// ~~

function GetJsonText(
    value
    )
{
    return json_encode( value );
}

// ~~

function GetJsonObject(
    text
    )
{
    return json_decode( text );
}

// ~~

function GetJsonInput(
    )
{
    return json_decode( file_get_contents( 'php://input' ) );
}

// ~~

function AddHeader(
    text
    )
{
    header( text );
}

// ~~

function Redirect(
    string path
    )
{
    header( 'Location: ' .. path, true, 303 );
}

// ~~

function SetStatus(
    status_code
    )
{
    http_response_code( status_code );
}

// ~~

function SetJsonResponse(
    object
    )
{
    header( 'Content-Type: application/json; charset=UTF-8' );
    echo json_encode( object );
}

// ~~

function SendRequest(
    string request_url,
    string request_method,
    request_body = null,
    array request_header_array = [],
    array request_query_map = []
    )
{
    if ( count( request_query_map ) > 0 )
    {
        request_url ..= '?' .. http_build_query( request_query_map );
    }

    var curl_request = curl_init( request_url );

    if ( request_method === 'POST' )
    {
        curl_setopt( curl_request, CURLOPT_POST, 1 );
    }
    else
    {
        curl_setopt( curl_request, CURLOPT_CUSTOMREQUEST, request_method );
    }

    if ( request_body !== null )
    {
        curl_setopt( curl_request, CURLOPT_POSTFIELDS, request_body );
    }

    curl_setopt( curl_request, CURLOPT_RETURNTRANSFER, true );

    if ( count( request_header_array ) > 0 )
    {
        curl_setopt( curl_request, CURLOPT_HTTPHEADER, request_header_array );
    }

    var request_response = curl_exec( curl_request );
    var request_status = curl_getinfo( curl_request, CURLINFO_RESPONSE_CODE );

    curl_close( curl_request );

    return ( object )array( 'Status' => request_status, 'Response' => request_response );
}

// ~~

function SendJsonRequest(
    string request_url,
    string request_method,
    request_object = null,
    array request_header_array = [],
    array request_query_map = []
    )
{
    array_push( request_header_array, 'Content-Type: application/json; charset=UTF-8' );

    var request_result
        = SendRequest(
              request_url,
              request_method,
              json_encode( request_object ),
              request_header_array,
              request_query_map
              );

    if ( request_result.Response !== false
         && is_string( request_result.Response ) )
    {
        request_result.Response = json_decode( request_result.Response );
    }

    return request_result;
}
