// -- FUNCTIONS

function GetBasilValueText(
    value
    )
{
    if ( is_array( value ) )
    {
        if ( count( value ) === 0 )
        {
            return '{}';
        }
        else
        {
            var value_text_array = [];

            if ( array_keys( value) !== range( 0, count( value ) - 1 ) )
            {
                foreach ( var key => var element; value )
                {
                    array_push( value_text_array, '{ ' .. GetValueText( key ) .. ' ~ ' .. GetValueText( element ) .. ' }' );
                }
            }
            else
            {
                foreach ( var element; value )
                {
                    array_push( value_text_array, GetValueText( element ) );
                }
            }

            return '{ ' .. implode( ' ~ ', value_text_array ) .. ' }';
        }
    }
    else
    {
        var value_text = str_replace( [ "\\", "~", "^", "{", "}", "\n", "\r", "\t" ], [ "\\\\", "\\~", "\\{", "\\}", "\\^", "\\n", "\\r", "\\t" ], value );

        if ( value_text.HasPrefix( ' ' ) )
        {
            value_text = '^' .. substr( value_text, 1 );
        }

        if ( value_text.HasSuffix( ' ' ) )
        {
            value_text = substr( value_text, 0, value_text.length - 1 ) .. '^';
        }

        return value_text;
    }
}

// ~~

function GetBasilColumnText(
    column_value,
    column
    )
{
    if ( ( HasPrefix( column_value, '[' )
           && HasSuffix( column_value, ']' )
           && ( HasSuffix( column.Name, "Array" )
                || HasSuffix( column.Name, "List" ) ) )
         || ( HasPrefix( column_value, '{' )
              && HasSuffix( column_value, '}' )
              && ( HasSuffix( column.Name, "Map" )
                   || HasSuffix( column.Name, "Dictionary" ) ) ) )
    {
        return GetBasilValueText( GetJsonObject( column_value ) );
    }
    else
    {
        return str_replace( [ "\\", "~", "^", "{", "}", "\n", "\r", "\t" ], [ "\\\\", "\\~", "\\{", "\\}", "\\^", "\\n", "\\r", "\\t" ], column_value );
    }
}

// ~~

function GetBasilTableText(
    string table_name
    )
{
    var column_array = GetDatabaseColumnArray( table_name );
    var column_by_name_map = GetDatabaseColumnByNameMap( column_array );

    var statement = GetDatabaseStatement( 'select * from `' .. table_name .. '`' );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    var basil_table_text = '';
    var basil_row_text_array = [];

    while ( var column_array = statement.fetch( PDO::FETCH_ASSOC ) )
    {
        var column_name_array = array_keys( column_array );
        var column_value_array = array_values( column_array );
        var column_value_count = count( column_value_array );

        if ( basil_table_text === '' )
        {
            basil_table_text
                = strtoupper( table_name ) .. "\n\n"
                  .. '    ' .. implode( ' ', column_name_array ) .. "\n\n";
        }

        var basil_row_text = '';

        for ( var column_value_index = 0;
              column_value_index < column_value_count;
              ++column_value_index )
        {
            if ( basil_row_text === '' )
            {
                basil_row_text ..= '        ';
            }
            else
            {
                basil_row_text ..= '            ~ ';
            }

            var column_name = column_name_array[ column_value_index ];
            var column_value = column_value_array[ column_value_index ];

            basil_row_text ..= GetBasilColumnText( column_value, column_by_name_map[ column_name ] ) .. "\n";
        }

        array_push( basil_row_text_array, basil_row_text );
    }

    sort( basil_row_text_array );

    basil_table_text ..= implode( "\n", basil_row_text_array );

    return basil_table_text;
}

// ~~

function GetBasilDatabaseText(
    array table_name_array
    )
{
    var basil_database_text = '';

    foreach ( var table_name; table_name_array )
    {
        basil_database_text
            ..= GetBasilTableText( table_name ) .. "\n";
    }

    return basil_database_text;
}
