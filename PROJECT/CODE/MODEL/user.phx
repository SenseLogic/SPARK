// -- FUNCTIONS

function GetDatabaseUserArray(
    )
{
    var statement = GetDatabaseStatement( 'select `Id`, `Email`, `Pseudonym`, `Password`, `Role` from `USER` order by `Id` asc' );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    var user_array = [];

    while ( var user = statement.fetchObject() )
    {
        user.Id = ( int )( user.Id );
        array_push( user_array, user );
    }

    return user_array;
}

// ~~

function GetDatabaseUserByIdMap(
    )
{
    var statement = GetDatabaseStatement( 'select `Id`, `Email`, `Pseudonym`, `Password`, `Role` from `USER`' );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    var user_by_id_map = [];

    while ( var user = statement.fetchObject() )
    {
        user.Id = ( int )( user.Id );
        user_by_id_map[ user.Id ] = user;
    }

    return user_by_id_map;
}

// ~~

function GetDatabaseUserById(
    int id
    )
{
    var statement = GetDatabaseStatement( 'select `Id`, `Email`, `Pseudonym`, `Password`, `Role` from `USER` where `Id` = ? limit 1' );
    statement.bindParam( 1, id, PDO::PARAM_INT );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    var user = statement.fetchObject();
    user.Id = ( int )( user.Id );

    return user;
}

// ~~

function AddDatabaseUser(
    string email,
    string pseudonym,
    string password,
    string role
    )
{
    var statement = GetDatabaseStatement( 'insert into `USER` ( `Email`, `Pseudonym`, `Password`, `Role` ) values ( ?, ?, ?, ? )' );
    statement.bindParam( 1, email, PDO::PARAM_STR );
    statement.bindParam( 2, pseudonym, PDO::PARAM_STR );
    statement.bindParam( 3, password, PDO::PARAM_STR );
    statement.bindParam( 4, role, PDO::PARAM_STR );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    return GetDatabaseAddedId( statement );
}

// ~~

function PutDatabaseUser(
    string email,
    string pseudonym,
    string password,
    string role
    )
{
    var statement = GetDatabaseStatement( 'replace into `USER` ( `Email`, `Pseudonym`, `Password`, `Role` ) values ( ?, ?, ?, ? )' );
    statement.bindParam( 1, email, PDO::PARAM_STR );
    statement.bindParam( 2, pseudonym, PDO::PARAM_STR );
    statement.bindParam( 3, password, PDO::PARAM_STR );
    statement.bindParam( 4, role, PDO::PARAM_STR );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }

    return GetDatabaseAddedId( statement );
}

// ~~

function SetDatabaseUser(
    int id,
    string email,
    string pseudonym,
    string password,
    string role
    )
{
    var statement = GetDatabaseStatement( 'update `USER` set `Email` = ?, `Pseudonym` = ?, `Password` = ?, `Role` = ? where Id = ?' );
    statement.bindParam( 1, email, PDO::PARAM_STR );
    statement.bindParam( 2, pseudonym, PDO::PARAM_STR );
    statement.bindParam( 3, password, PDO::PARAM_STR );
    statement.bindParam( 4, role, PDO::PARAM_STR );
    statement.bindParam( 5, id, PDO::PARAM_INT );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }
}

// ~~

function RemoveDatabaseUserById(
    int id
    )
{
    var statement = GetDatabaseStatement( 'delete from `USER` where `Id` = ?' );
    statement.bindParam( 1, id, PDO::PARAM_INT );

    if ( !statement.execute() )
    {
        var_dump( statement.errorInfo() );
    }
}
